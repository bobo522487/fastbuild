<?xml version="1.0" encoding="UTF-8"?>
<story-context id="bmad/bmm/workflows/4-implementation/story-context/fastbuild-story-1.1" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.1</storyId>
    <title>项目初始化和基础配置</title>
    <status>Draft</status>
    <generatedAt>2025-10-10T12:00:00Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/bobo/project/test/fastbuild/docs/stories/story-1.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>开发者</asA>
    <iWant>能够创建新项目并自动初始化Next.js应用结构</iWant>
    <soThat>快速开始构建应用，无需手动配置复杂的基础设施</soThat>
    <tasks>Task 1: 实现项目创建API端点 (AC: #1, #2) - Subtask 1.1: 创建POST /api/projects路由 - Subtask 1.2: 实现项目数据验证（Zod schema） - Subtask 1.3: 集成Prisma数据库操作 | Task 2: 实现项目基础配置 (AC: #2, #3, #4) - Subtask 2.1: 自动生成项目配置文件 - Subtask 2.2: 设置TypeScript配置 - Subtask 2.3: 创建基础目录结构 | Task 3: 前端项目创建界面 (AC: #1) - Subtask 3.1: 创建项目创建表单组件 - Subtask 3.2: 集成API调用和状态管理 - Subtask 3.3: 实现创建成功后的页面跳转</tasks>
  </story>

  <acceptanceCriteria>1. 系统能够创建新的项目实例 | 2. 自动配置基础Next.js 15全栈结构 | 3. 设置基础的TypeScript配置 | 4. 建立项目文件结构</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="/home/bobo/project/test/fastbuild/docs/tech-spec-epic-1.md" title="Epic 1 技术规范：基础平台与项目初始化" section="架构对齐" snippet="Epic 1 严格遵循解决方案架构中定义的分层架构模式，采用分层单体架构，兼顾开发效率和维护便利性。架构原则：单一职责、依赖倒置、开闭原则、接口隔离。分层设计：表现层、应用层、领域层、基础设施层。" />
      <doc path="/home/bobo/project/test/fastbuild/docs/solution-architecture.md" title="FastBuild 解决方案架构文档" section="技术栈" snippet="核心技术：Next.js 15.5.4全栈框架、React 19.2.0、shadcn/ui + Radix UI、REST API + Swagger/OpenAPI 3.0、PostgreSQL + Prisma 6.17.0、NextAuth.js 5.0.0-beta.25、TanStack Query 5.90.2。" />
      <doc path="/home/bobo/project/test/fastbuild/docs/solution-architecture.md" title="FastBuild 解决方案架构文档" section="数据架构" snippet="Project模型包含id、slug、name、description、visibility等字段，与ProjectMember建立关联关系，支持基于角色的访问控制。" />
    </docs>
    <code>
      <artifact path="/home/bobo/project/test/fastbuild/prisma/schema.prisma" kind="data-model" symbol="Project" lines="212-235" reason="核心项目数据模型，包含项目基础信息和关联关系" />
      <artifact path="/home/bobo/project/test/fastbuild/prisma/schema.prisma" kind="data-model" symbol="ProjectMember" lines="237-248" reason="项目成员权限模型，支持基于角色的访问控制" />
      <artifact path="/home/bobo/project/test/fastbuild/src/app/api/auth/register/route.ts" kind="api-route" symbol="registerSchema" lines="7-11" reason="参考现有API验证模式，使用Zod进行请求数据验证" />
      <artifact path="/home/bobo/project/test/fastbuild/src/app/api/auth/register/route.ts" kind="api-route" symbol="POST" lines="13-58" reason="参考现有API错误处理和响应格式模式" />
      <artifact path="/home/bobo/project/test/fastbuild/src/lib/auth.ts" kind="utility" symbol="hashPassword" lines="3-5" reason="密码加密工具函数，项目初始化时可能需要创建默认用户" />
      <artifact path="/home/bobo/project/test/fastbuild/src/server/db.ts" kind="database" symbol="db" lines="15-17" reason="Prisma客户端实例，所有数据库操作的基础" />
    </code>
    <dependencies>
      <ecosystem name="node">
        <package name="next" version="15.2.3" />
        <package name="react" version="19.0.0" />
        <package name="@prisma/client" version="6.5.0" />
        <package name="zod" version="3.24.2" />
        <package name="next-auth" version="5.0.0-beta.25" />
        <package name="@tanstack/react-query" version="5.69.0" />
        <package name="argon2" version="0.44.0" />
      </ecosystem>
      <ecosystem name="dev">
        <package name="prisma" version="6.5.0" />
        <package name="typescript" version="5.8.2" />
        <package name="@biomejs/biome" version="1.9.4" />
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint name="架构模式" description="必须遵循分层单体架构：表现层、应用层、领域层、基础设施层" source="tech-spec-epic-1.md" />
    <constraint name="RESTful API规范" description="严格遵循REST架构风格，使用标准HTTP方法和状态码" source="tech-spec-epic-1.md" />
    <constraint name="统一响应格式" description="使用ApiResponse&lt;T&gt;接口，包含success、data、error和meta字段" source="tech-spec-epic-1.md" />
    <constraint name="类型安全" description="通过Zod进行请求数据验证，通过Prisma实现数据库类型安全" source="tech-spec-epic-1.md" />
    <constraint name="模块化设计" description="按功能模块组织，减少模块间耦合，提高代码复用性" source="solution-architecture.md" />
    <constraint name="数据库设计" description="使用Prisma ORM，合理的索引设计和查询优化，适当的外键约束和事务处理" source="tech-spec-epic-1.md" />
  </constraints>

  <interfaces>
    <interface name="ApiResponse&lt;T&gt;" kind="response-type" signature="interface ApiResponse&lt;T&gt; { success: boolean; data?: T; error?: { code: string; message: string; details?: any[] }; meta: { timestamp: string; requestId: string } }" path="src/lib/api-response.ts" />
    <interface name="PrismaClient" kind="database" signature="const db: PrismaClient" path="src/server/db.ts" />
    <interface name="ZodSchema" kind="validation" signature="const createProjectSchema = z.object({ name: z.string().min(1).max(100), slug: z.string().min(1).max(100), description: z.string().optional(), visibility: z.enum(['PRIVATE', 'PUBLIC']).default('PRIVATE') })" path="src/lib/validations.ts" />
    <interface name="NextRequest/NextResponse" kind="api" signature="export async function POST(request: NextRequest): Promise&lt;NextResponse&gt;" path="src/app/api/projects/route.ts" />
  </interfaces>

  <tests>
    <standards>遵循 Epic 1 中定义的测试策略：使用 Vitest 进行单元测试，使用 Jest + Supertest 进行API契约测试，使用 React Testing Library 进行前端测试。测试等级框架：单元测试用于业务逻辑验证，集成测试用于API端点测试，E2E测试用于关键用户流程验证。</standards>
    <locations>单元测试：__tests__/unit/ 目录，集成测试：__tests__/integration/ 目录，API测试：__tests__/api/ 目录，前端测试：__tests__/components/ 目录</locations>
    <ideas>
      <test idea="创建项目API端点测试" acceptanceCriteriaId="1" testType="integration" description="测试POST /api/projects端点，验证项目创建成功，返回正确的响应格式" />
      <test idea="项目数据验证测试" acceptanceCriteriaId="1,2,3,4" testType="unit" description="测试Zod schema验证，确保无效数据被正确拒绝" />
      <test idea="项目创建表单组件测试" acceptanceCriteriaId="1" testType="unit" description="测试项目创建表单的渲染和用户交互" />
      <test idea="完整项目创建流程测试" acceptanceCriteriaId="1,2,3,4" testType="e2e" description="测试从用户填写表单到项目创建完成的完整流程" />
    </ideas>
  </tests>
</story-context>