<story-context id="bmad/bmm/workflows/4-implementation/story-context/output" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.3</storyId>
    <title>基础认证系统</title>
    <status>Draft</status>
    <generatedAt>2025-10-10</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/bobo/project/test/fastbuild/docs/stories/story-1.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>用户</asA>
    <iWant>能够通过邮箱/密码和社交登录方式注册和登录</iWant>
    <soThat>获得安全便捷的身份认证体验，支持多种登录方式</soThat>
    <tasks>- [ ] Task 1: 实现邮箱/密码认证 (AC: #1)
  - [ ] Subtask 1.1: 创建用户注册API端点
  - [ ] Subtask 1.2: 实现用户登录API端点
  - [ ] Subtask 1.3: 添加密码哈希和验证
  - [ ] Subtask 1.4: 实现邮箱验证功能
- [ ] Task 2: 集成社交登录 (AC: #2)
  - [ ] Subtask 2.1: 配置Google OAuth提供者
  - [ ] Subtask 2.2: 配置GitHub OAuth提供者
  - [ ] Subtask 2.3: 实现社交登录回调处理
  - [ ] Subtask 2.4: 创建社交登录绑定功能
- [ ] Task 3: 用户会话管理 (AC: #3)
  - [ ] Subtask 3.1: 配置NextAuth.js会话策略
  - [ ] Subtask 3.2: 实现JWT令牌管理
  - [ ] Subtask 3.3: 创建会话状态管理
  - [ ] Subtask 3.4: 实现自动登录和登出
- [ ] Task 4: 密码重置功能 (AC: #4)
  - [ ] Subtask 4.1: 创建密码重置请求API
  - [ ] Subtask 4.2: 实现邮件发送功能
  - [ ] Subtask 4.3: 创建密码重置确认API
  - [ ] Subtask 4.4: 实现密码重置前端界面</tasks>
  </story>

  <acceptanceCriteria>1. 实现邮箱/密码注册和登录
2. 集成GitHub OAuth登录
3. 基础的用户会话管理
4. 密码重置功能</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/bobo/project/test/fastbuild/docs/tech-spec-epic-1.md</path>
        <title>Epic 1 技术规范：基础平台与项目初始化</title>
        <section>认证系统设计</section>
        <snippet>NextAuth.js 5.0.0-beta.25 多平台认证集成，支持 Google、GitHub 和邮箱密码三种登录方式，采用 PrismaAdapter 进行会话持久化，实现 JWT 令牌管理和安全密码哈希。</snippet>
      </doc>
      <doc>
        <path>/home/bobo/project/test/fastbuild/docs/solution-architecture.md</path>
        <title>FastBuild 解决方案架构文档</title>
        <section>技术栈 - 认证</section>
        <snippet>NextAuth.js 5.0.0-beta.25 - 支持多种社交登录，Session 管理，与 Prisma ORM 完全集成，支持企业级认证需求。</snippet>
      </doc>
      <doc>
        <path>/home/bobo/project/test/fastbuild/docs/PRD.md</path>
        <title>产品需求文档</title>
        <section>功能需求</section>
        <snippet>FR008: 系统必须支持用户通过"邮箱/密码"以及至少两种社交平台（Google, GitHub）进行注册和登录</snippet>
      </doc>
      <doc>
        <path>/home/bobo/project/test/fastbuild/docs/data-schema.md</path>
        <title>数据架构文档</title>
        <section>认证系统基础表</section>
        <snippet>NextAuth.js 认证系统必需的基础表：User、Account、Session、VerificationToken，支持扩展字段 displayName 和 avatarUrl，与 ProjectMember 关联实现企业级权限管理。</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/bobo/project/test/fastbuild/src/server/auth/config.ts</path>
        <kind>NextAuth配置</kind>
        <symbol>authConfig</symbol>
        <lines>37-88</lines>
        <reason>核心认证配置，定义了GitHub和Credentials提供者，实现了Prisma适配器和会话回调</reason>
      </artifact>
      <artifact>
        <path>/home/bobo/project/test/fastbuild/src/lib/auth.ts</path>
        <kind>认证工具函数</kind>
        <symbol>hashPassword, verifyPassword</symbol>
        <lines>3-12</lines>
        <reason>密码哈希和验证的核心安全函数，使用argon2算法实现</reason>
      </artifact>
      <artifact>
        <path>/home/bobo/project/test/fastbuild/src/app/api/auth/register/route.ts</path>
        <kind>API路由</kind>
        <symbol>POST</symbol>
        <lines>13-58</lines>
        <reason>用户注册API端点实现，包含输入验证、重复用户检查和密码哈希</reason>
      </artifact>
      <artifact>
        <path>/home/bobo/project/test/fastbuild/prisma/schema.prisma</path>
        <kind>数据模型</kind>
        <symbol>User, Account, Session, VerificationToken</symbol>
        <lines>99-153</lines>
        <reason>NextAuth.js标准数据模型定义，支持认证系统的核心数据结构</reason>
      </artifact>
    </code>
    <dependencies>
      <ecosystem name="node">
        <package name="next-auth" version="5.0.0-beta.25" />
        <package name="@auth/prisma-adapter" version="2.7.2" />
        <package name="argon2" version="0.44.0" />
        <package name="zod" version="3.24.2" />
        <package name="@prisma/client" version="6.5.0" />
        <package name="next" version="15.2.3" />
        <package name="react" version="19.0.0" />
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>基于 Epic 1 技术规格，必须使用NextAuth.js 5.0.0-beta.25实现认证系统</constraint>
    <constraint>安全性优先，必须使用行业最佳安全实践，密码哈希、JWT令牌</constraint>
    <constraint>遵循分层单体架构，认证相关功能集中在独立的auth模块</constraint>
    <constraint>使用PrismaAdapter进行会话持久化，确保数据库一致性</constraint>
    <constraint>API设计遵循RESTful规范，使用统一的错误处理和响应格式</constraint>
    <constraint>使用Zod进行严格的数据验证，确保输入安全性</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>registerUser</name>
      <kind>API</kind>
      <signature>POST /api/auth/register - { email: string, password: string, name?: string }</signature>
      <path>/home/bobo/project/test/fastbuild/src/app/api/auth/register/route.ts</path>
    </interface>
    <interface>
      <name>signIn</name>
      <kind>NextAuth</kind>
      <signature>signIn('credentials' | 'github', { email, password, redirect?: boolean })</signature>
      <path>/home/bobo/project/test/fastbuild/src/server/auth/config.ts</path>
    </interface>
    <interface>
      <name>hashPassword</name>
      <kind>Function</kind>
      <signature>hashPassword(password: string): Promise&lt;string&gt;</signature>
      <path>/home/bobo/project/test/fastbuild/src/lib/auth.ts</path>
    </interface>
    <interface>
      <name>verifyPassword</name>
      <kind>Function</kind>
      <signature>verifyPassword(password: string, hashedPassword: string): Promise&lt;boolean&gt;</signature>
      <path>/home/bobo/project/test/fastbuild/src/lib/auth.ts</path>
    </interface>
  </interfaces>

  <tests>
    <standards>遵循 Epic 1 中定义的测试策略：使用 Jest + React Testing Library 进行单元测试，集成测试覆盖完整的用户注册和登录流程，API测试使用 Jest + Supertest 测试认证API端点，前端测试使用 React Testing Library 测试认证组件交互，安全测试覆盖密码哈希、JWT令牌和会话管理。</standards>
    <locations>tests/auth/ - 认证相关测试目录，tests/integration/ - 集成测试目录，__tests__/ - 单元测试目录</locations>
    <ideas>
      <test mappedTo="AC1">
        <name>用户注册流程测试</name>
        <description>测试邮箱密码注册的完整流程，包括输入验证、密码哈希和用户创建</description>
      </test>
      <test mappedTo="AC2">
        <name>GitHub OAuth登录测试</name>
        <description>测试GitHub社交登录的授权流程和用户信息同步</description>
      </test>
      <test mappedTo="AC3">
        <name>会话管理测试</name>
        <description>测试用户会话的创建、维护、过期和自动登出功能</description>
      </test>
      <test mappedTo="AC4">
        <name>密码重置流程测试</name>
        <description>测试密码重置请求生成、邮件发送和密码更新流程</description>
      </test>
    </ideas>
  </tests>
</story-context>