generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppDeployment {
  id                    String               @id @default(cuid())
  applicationId         String
  dataModelDeploymentId String?
  version               String
  environment           DeploymentEnv
  status                DeploymentStatus
  buildUrl              String?
  qrCode                String?
  deployedAt            DateTime             @default(now())
  deployedBy            String
  archivedAt            DateTime?
  config                Json
  buildLog              String?
  buildTime             Int?
  viewCount             Int                  @default(0)
  lastAccessedAt        DateTime?
  Application           Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  DataModelDeployment   DataModelDeployment? @relation(fields: [dataModelDeploymentId], references: [id])
  User                  User                 @relation(fields: [deployedBy], references: [id])

  @@index([applicationId, environment, status])
  @@index([applicationId, environment, version])
  @@index([dataModelDeploymentId])
  @@index([deployedAt])
  @@index([deployedBy])
  @@index([environment, status])
  @@index([lastAccessedAt])
  @@index([status])
  @@index([viewCount])
}

model AppPage {
  id            String      @id @default(cuid())
  applicationId String
  name          String
  path          String
  layout        Json
  isHomePage    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, path])
  @@index([applicationId])
  @@index([applicationId, isHomePage])
}

model Application {
  id            String          @id @default(cuid())
  projectId     String
  name          String
  slug          String
  description   String?
  createdBy     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  AppDeployment AppDeployment[]
  AppPage       AppPage[]
  User          User            @relation(fields: [createdBy], references: [id])
  Project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, slug])
  @@index([createdAt])
  @@index([createdBy])
  @@index([projectId])
}

model AuditLog {
  id           String   @id @default(cuid())
  projectId    String?
  userId       String?
  action       String
  resourceType String
  resourceId   String?
  oldValues    Json?
  newValues    Json?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  Project      Project? @relation(fields: [projectId], references: [id])
  User         User?    @relation(fields: [userId], references: [id])

  @@index([action, createdAt])
  @@index([action])
  @@index([projectId, createdAt])
  @@index([resourceType, resourceId, createdAt])
  @@index([resourceType, resourceId])
  @@index([userId, createdAt])
}

model DataColumn {
  id           String     @id @default(cuid())
  tableId      String
  name         String
  displayName  String?
  type         ColumnType
  nullable     Boolean    @default(true)
  defaultValue Json?
  unique       Boolean    @default(false)
  order        Int?
  options      Json?
  DataTable    DataTable  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@index([tableId])
  @@index([tableId, order])
  @@index([type])
}

model DataModelDeployment {
  id             String           @id @default(cuid())
  projectId      String
  version        String
  environment    DeploymentEnv
  status         DeploymentStatus
  deployedAt     DateTime         @default(now())
  deployedBy     String
  archivedAt     DateTime?
  tableSnapshots Json
  schemaName     String?
  changeLog      Json?
  metadata       Json?
  AppDeployment  AppDeployment[]
  User           User             @relation(fields: [deployedBy], references: [id])
  Project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([deployedAt])
  @@index([deployedBy])
  @@index([environment, status])
  @@index([projectId, environment])
  @@index([projectId, environment, status])
  @@index([projectId, environment, version])
  @@index([status])
}

model DataTable {
  id          String       @id @default(cuid())
  projectId   String
  name        String
  displayName String?
  description String?
  options     Json?
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  DataColumn  DataColumn[]
  User        User         @relation(fields: [createdBy], references: [id])
  Project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  TableView   TableView[]

  @@index([createdAt])
  @@index([createdBy])
  @@index([deletedAt])
  @@index([projectId])
  @@index([projectId, name])
}

model Project {
  id                  String                @id @default(cuid())
  name                String
  slug                String
  description         String?
  visibility          Visibility            @default(PRIVATE)
  createdBy           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  deletedAt           DateTime?
  Application         Application[]
  AuditLog            AuditLog[]
  DataModelDeployment DataModelDeployment[]
  DataTable           DataTable[]
  User                User                  @relation(fields: [createdBy], references: [id])
  ProjectMember       ProjectMember[]

  @@index([createdAt])
  @@index([createdBy])
  @@index([deletedAt])
  @@index([slug])
  @@index([visibility])
}

model ProjectMember {
  id        String     @id @default(cuid())
  projectId String
  userId    String
  role      MemberRole @default(VIEWER)
  createdAt DateTime   @default(now())
  Project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([projectId, role])
  @@index([userId])
  @@index([userId, projectId])
}

model TableView {
  id              String    @id @default(cuid())
  tableId         String
  name            String
  description     String?
  definition      Json
  isDefault       Boolean   @default(false)
  isMaterialized  Boolean   @default(false)
  refreshInterval Int?
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  User            User      @relation(fields: [createdBy], references: [id])
  DataTable       DataTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@index([createdBy])
  @@index([isMaterialized])
  @@index([tableId])
  @@index([tableId, isDefault])
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  name                String?
  passwordHash        String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  AppDeployment       AppDeployment[]
  Application         Application[]
  AuditLog            AuditLog[]
  DataModelDeployment DataModelDeployment[]
  DataTable           DataTable[]
  Project             Project[]
  ProjectMember       ProjectMember[]
  TableView           TableView[]

  @@index([email])
}

enum ColumnType {
  STRING
  TEXT
  NUMBER
  BOOLEAN
  DATE
  TIMESTAMP
  JSON
}

enum DeploymentEnv {
  PREVIEW
  PRODUCTION
}

enum DeploymentStatus {
  BUILDING
  DEPLOYED
  FAILED
  ARCHIVED
}

enum MemberRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum Visibility {
  PUBLIC
  PRIVATE
}
