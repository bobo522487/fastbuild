// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Form {
  id          String   @id @default(cuid())
  name        String
  description String?  // 表单描述
  version     String   @default("1.0.0") // 表单版本
  metadata    Json     // 存储 FormMetadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联到创建表单的用户
  createdById String?
  createdBy  User?   @relation("FormCreator", fields: [createdById], references: [id])

  submissions Submission[]

  @@map("forms")
}

model Submission {
  id          String    @id @default(cuid())
  formId      String
  data        Json      // 提交的表单数据
  submittedAt DateTime  @default(now())
  ipAddress   String?   // 提交者IP地址
  userAgent   String?   // 用户代理信息
  status      SubmissionStatus @default(PENDING) // 提交状态

  // 关联到提交表单的用户
  submittedById String?
  submittedBy  User?   @relation("SubmissionAuthor", fields: [submittedById], references: [id])

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String
  passwordHash  String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  createdForms  Form[]       @relation("FormCreator")
  submissions   Submission[] @relation("SubmissionAuthor")
  sessions      UserSession[]

  @@map("users")
}

model UserSession {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime  @default(now())

  // 关联到用户
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

enum UserRole {
  ADMIN
  USER
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model MonitoringEvent {
  id        String   @id @default(cuid())
  type      String   // 'error' | 'performance' | 'user_action' | 'api_call'
  timestamp DateTime // 事件时间
  userId    String?  // 用户ID（如果有）
  sessionId String   // 会话ID
  data      Json     // 事件数据
  metadata  Json?    // 元数据（userAgent, url等）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("monitoring_events")
}

model ErrorLog {
  id          String   @id @default(cuid())
  eventId     String?  // 关联的监控事件ID
  level       String   // 'error' | 'warn' | 'info'
  message     String   // 错误消息
  stack       String?  // 错误堆栈
  component   String?  // 组件名称
  path        String   // 发生错误的路径
  userId      String?  // 用户ID
  sessionId   String   // 会话ID
  resolved    Boolean  @default(false) // 是否已解决
  resolvedAt  DateTime? // 解决时间
  resolvedBy  String?  // 解决者
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("error_logs")
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  name      String   // 指标名称
  value     Float    // 指标值
  unit      String   // 单位
  tags      Json?    // 标签
  path      String   // 页面路径
  userId    String?  // 用户ID
  sessionId String   // 会话ID
  timestamp DateTime // 记录时间
  createdAt DateTime @default(now())

  @@map("performance_metrics")
  @@index([name, timestamp])
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String?  // 用户ID
  sessionId   String   // 会话ID
  action      String   // 用户操作
  element     String?  // 操作元素
  path        String   // 页面路径
  metadata    Json?    // 额外元数据
  timestamp   DateTime // 操作时间
  createdAt   DateTime @default(now())

  @@map("user_activities")
  @@index([userId, timestamp])
  @@index([action, timestamp])
}