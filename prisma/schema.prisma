// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "nativeDistinct", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Form {
  id          String   @id @default(cuid())
  name        String
  description String?  // 表单描述
  version     String   @default("1.0.0") // 表单版本
  metadata    Json     // 存储 FormMetadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联到创建表单的用户
  createdById String?
  createdBy  User?   @relation("FormCreator", fields: [createdById], references: [id])

  submissions Submission[]

  // 性能优化：复合索引
  @@index([createdById, createdAt])
  @@index([createdAt])
  @@index([name])
  @@index([version])

  @@map("forms")
}

model Submission {
  id          String    @id @default(cuid())
  formId      String
  data        Json      // 提交的表单数据
  submittedAt DateTime  @default(now())
  ipAddress   String?   // 提交者IP地址
  userAgent   String?   // 用户代理信息
  status      SubmissionStatus @default(PENDING) // 提交状态

  // 关联到提交表单的用户
  submittedById String?
  submittedBy  User?   @relation("SubmissionAuthor", fields: [submittedById], references: [id])

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  // 性能优化：复合索引
  @@index([formId, submittedAt])
  @@index([formId, status])
  @@index([submittedById, submittedAt])
  @@index([submittedAt])
  @@index([status])
  @@index([ipAddress])

  @@map("submissions")
}

// Auth.js 用户模型 - 兼容现有的User模型
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?

  // 扩展字段以支持现有功能
  passwordHash  String?
  role          UserRole        @default(USER)
  isActive      Boolean         @default(true)
  avatar        String?         // 别名，与image字段保持同步

  // 时间戳
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Auth.js 关联
  accounts      Account[]
  sessions      Session[]

  // 业务逻辑关联
  createdForms  Form[]          @relation("FormCreator")
  submissions   Submission[]    @relation("SubmissionAuthor")

  // 性能优化：复合索引
  @@index([email])
  @@index([role, isActive])
  @@index([createdAt])
  @@index([emailVerified])

  @@map("users")
}

// Auth.js 账户模型 - 用于存储第三方认证信息
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Auth.js 会话模型 - 替换原来的UserSession
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Auth.js 验证令牌模型
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model MonitoringEvent {
  id        String   @id @default(cuid())
  type      String   // 'error' | 'performance' | 'user_action' | 'api_call'
  timestamp DateTime // 事件时间
  userId    String?  // 用户ID（如果有）
  sessionId String   // 会话ID
  data      Json     // 事件数据
  metadata  Json?    // 元数据（userAgent, url等）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 性能优化：复合索引
  @@index([type, timestamp])
  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@index([createdAt])

  // JSON 字段索引（PostgreSQL GIN 索引）
  @@index([data], type: Gin)
  @@index([metadata], type: Gin)

  @@map("monitoring_events")
}

model ErrorLog {
  id          String   @id @default(cuid())
  eventId     String?  // 关联的监控事件ID
  level       String   // 'error' | 'warn' | 'info'
  message     String   // 错误消息
  stack       String?  // 错误堆栈
  component   String?  // 组件名称
  path        String   // 发生错误的路径
  userId      String?  // 用户ID
  sessionId   String   // 会话ID
  resolved    Boolean  @default(false) // 是否已解决
  resolvedAt  DateTime? // 解决时间
  resolvedBy  String?  // 解决者
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 性能优化：复合索引
  @@index([level, createdAt])
  @@index([resolved, createdAt])
  @@index([component, createdAt])
  @@index([path, createdAt])
  @@index([userId, createdAt])
  @@index([sessionId, createdAt])
  @@index([eventId])

  // 文本搜索索引（在PostgreSQL中需要手动创建全文索引）

  @@map("error_logs")
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  name      String   // 指标名称
  value     Float    // 指标值
  unit      String   // 单位
  tags      Json?    // 标签
  path      String   // 页面路径
  userId    String?  // 用户ID
  sessionId String   // 会话ID
  timestamp DateTime // 记录时间
  createdAt DateTime @default(now())

  // 性能优化：复合索引
  @@index([name, timestamp])
  @@index([path, timestamp])
  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@index([createdAt])

  // JSON 字段索引（PostgreSQL GIN 索引）
  @@index([tags], type: Gin)

  // 范围索引（用于性能指标统计）
  @@index([value])

  @@map("performance_metrics")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String?  // 用户ID
  sessionId   String   // 会话ID
  action      String   // 用户操作
  element     String?  // 操作元素
  path        String   // 页面路径
  metadata    Json?    // 额外元数据
  timestamp   DateTime // 操作时间
  createdAt   DateTime @default(now())

  // 性能优化：复合索引
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([sessionId, timestamp])
  @@index([path, timestamp])
  @@index([createdAt])

  // JSON 字段索引（PostgreSQL GIN 索引）
  @@index([metadata], type: Gin)

  // 操作统计索引
  @@index([action, element])

  @@map("user_activities")
}