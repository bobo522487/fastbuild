// ÊµãËØï z.stringbool() ÁöÑË°å‰∏∫
import { z } from 'zod';

console.log('üß™ Testing z.stringbool() behavior...');

const stringboolSchema = z.stringbool();

// ÊµãËØïÂêÑÁßçËæìÂÖ•Á±ªÂûã
const testCases = [
  // Â≠óÁ¨¶‰∏≤ËæìÂÖ• (Â∫îËØ•Â∑•‰Ωú)
  { input: 'true', expected: true },
  { input: 'false', expected: false },
  { input: '1', expected: true },
  { input: '0', expected: false },
  { input: 'yes', expected: true },
  { input: 'no', expected: false },
  { input: 'on', expected: true },
  { input: 'off', expected: false },

  // Â∏ÉÂ∞îÂÄºËæìÂÖ• (ÈúÄË¶ÅÊ£ÄÊü•)
  { input: true, expected: true },
  { input: false, expected: false },

  // Êï∞Â≠óËæìÂÖ• (ÈúÄË¶ÅÊ£ÄÊü•)
  { input: 1, expected: true },
  { input: 0, expected: false },

  // Êó†ÊïàËæìÂÖ•
  { input: 'invalid', expected: false },
  { input: null, expected: false },
  { input: undefined, expected: false },
];

testCases.forEach(({ input, expected }) => {
  const result = stringboolSchema.safeParse(input);
  const success = result.success;
  const actual = success ? result.data : 'failed';

  console.log(`Input: ${JSON.stringify(input)} -> Success: ${success}, Value: ${actual}`);

  if (success && actual !== expected) {
    console.log(`  ‚ö†Ô∏è  Expected ${expected}, got ${actual}`);
  }
});

// ÊµãËØïÂéüÂßã boolean schema ÁöÑË°å‰∏∫
console.log('\nüîÑ Testing original z.coerce.boolean()...');
const booleanSchema = z.coerce.boolean();

const booleanTestCases = [
  { input: true, expected: true },
  { input: false, expected: false },
  { input: 'true', expected: true },
  { input: 'false', expected: false },
  { input: 1, expected: true },
  { input: 0, expected: false },
];

booleanTestCases.forEach(({ input, expected }) => {
  const result = booleanSchema.safeParse(input);
  const success = result.success;
  const actual = success ? result.data : 'failed';

  console.log(`Input: ${JSON.stringify(input)} -> Success: ${success}, Value: ${actual}`);

  if (success && actual !== expected) {
    console.log(`  ‚ö†Ô∏è  Expected ${expected}, got ${actual}`);
  }
});